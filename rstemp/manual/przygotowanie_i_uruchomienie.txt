===== Przygotowanie i uruchomienie =====

==== Pliki systemowe OpenWRT ====

Pliki można pobrać ze strony <code>https://downloads.openwrt.org/releases/17.01.4/targets/omap/generic</code>



=== Kompilacja ze źródeł ===

Zainstalować w systemie pakiety ze strony
<code>https://openwrt.org/docs/guide-developer/build-system/install-buildsystem</code>

Jeżeli wymagane będzie GCC 6 to zainstalować według sekcji [[#gcc_6|GCC 6]]

Pobrać i skonfigurować źródła OpenWRT:

<code>git clone https://git.openwrt.org/openwrt/openwrt.git
cd openwrt
git fetch --tags
git checkout v17.01.4
make package/symlinks
make menuconfig</code>

Ustawić:
  * Target System
    * TI OMAP3/4/AM33xx
  * Kernel Modules -> W1 support
    * <*> kmod-w1
    * <*> kmod-w1-gpio-custom
    * <*> kmod-w1-master-gpio
    * <*> kmod-w1-slave-therm

<code>make kernel_menuconfig</code>

Ustawić:
  * Device Drivers
    * <*> Dallas's 1-wire support

W przypadku wykorzystywania 1-wire należy zrobić patch z sekcji [[beagleboneblack:openwrt:1wire#patch_1-wire_dla_openwrt|Patch 1-wire dla OpenWRT]]

<code>make download
make V=99 -j3 (poziom błędów, ilość wątków)</code>

Całość zostanie skompilowana do folderu "bin/"

Przywrócenie domyślnej konfiguracji <code>make defconfig</code>



== Aktualizacja źródeł ==

<code>git pull
make package/symlinks</code>

Opcjonalnie (nie używałem tego)
<code>./scripts/feeds update -a
./scripts/feeds update packages luci
./scripts/feeds install -a -p luci</code>

Do sprawdzenia czy po aktualizacji źródeł, patch 1-wire nie zostaje usunięty.



==== Karta pamięci ====



=== Partycje ===

Sprawdzić gdzie zamontowana jest karta pamięci
<code>sudo fdisk -l</code>

<code>sudo cfdisk /dev/sdd</code>

Utworzyć partycje:
  * Type: c - W95 FAT32 (LBA); Size: 100M; Bootable
  * Type: 83 - LINUX

Utworzyć system plików dla każdej partycji
<code>sudo mkfs.vfat -n boot /dev/sdd1
sudo mkfs.ext4 /dev/sdd2</code>

Zmiana nazwy dysku
<code>sudo e2label /dev/sdd2 "root"</code>



=== Pliki na karcie pamięci ===

Na pierwszą partycję wgrać pliki:
  * MLO
  * u-boot.img
  * am335x-boneblack.dtb
  * zImage
  * uEnv.txt

Na drugą partycję wgrać pliki systemowe z paczki rootfs i rozpakować.



=== uEnv.txt ===

uEnv.txt is used on new uboot versions. Older u-boot versions use a boot.scr file.

Very important is the uEnv.txt. It describes the u-boot boot environment for the device. It contains the kernel cmdline, root partition device and filesystem. The console ttyO0 is the debug serial console attached to the device. With this console you can see very early debug information from u-boot and the kernel. 

<code>kernel_file=zImage
fdtfile=am335x-boneblack.dtb

loadzimage=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${kernel_file}
loadfdt=load mmc ${mmcdev}:${mmcpart} ${fdtaddr} ${fdtfile}

console=ttyO0,115200n8
mmcroot=/dev/mmcblk0p2 ro
mmcrootfstype=ext4 rootwait

mmcargs=setenv bootargs console=${console} root=${mmcroot} rootfstype=${mmcrootfstype} ${optargs}

uenvcmd=run loadzimage; run loadfdt; run mmcargs; bootz ${loadaddr} - ${fdtaddr}

optargs="debug init=/etc/preinit"</code>



==== Konfiguracja ====

=== Interfejsy sieciowe ===

<code>vi /etc/config/network</code>

<code>config interface 'lan'
        option type 'bridge'
        option ifname 'eth0'
        option proto 'static'
        option ipaddr '192.168.1.1'
        option netmask '255.255.255.0'
        option ip6assign '60'
        option dns '8.8.8.8'
        option gateway '192.168.1.2'</code>

<code>/etc/init.d/network restart</code>



==== GCC 6 ====

You can install GCC 6 by adding the ubuntu-toolchain-r/test PPA. To do so, run the following commands:

<code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt update
sudo apt install gcc-6</code>

You can verify that gcc-6 is installed by running gcc-6 --version and the output should say gcc-6 (Ubuntu 6.1.1-2ubuntu12~16.04) 6.1.1 20160510.

If you want to further change the default GCC and G++ to the latest versions, install g++-6 with

<code>sudo apt install g++-6</code>

and then run

<code>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6</code>

